Что такое Тест план?
	 Тест-план (test plan) — документ, описывающий и регламентирующий перечень работ по тестированию, а также соответствующие техники и подходы, 
    стратегию, области ответственности, ресурсы, расписание и ключевые даты.

Что должен описывать тест план?
	 В общем случае тест-план включает следующие разделы:
	- Цель (purpose). Предельно краткое описание цели разработки приложения (частично это напоминает бизнес-требования, но здесь информация 
    подаётся в ещё более сжатом виде и в контексте того, на что следует обращать первостепенное внимание при организации тестирования и 
    повышения качества).
	- Области, подвергаемые тестированию (features to be tested). Перечень функций и/или нефункциональных особенностей приложения, которые будут 
    подвергнуты тестированию. В некоторых случаях здесь также приводится приоритет соответствующей области.
	- Области, не подвергаемые тестированию (features not to be tested). Перечень функций и/или нефункциональных особенностей приложения, которые 
    не будут подвергнуты тестированию. Причины исключения той или иной области из списка тестируемых могут быть самыми различными — от предельно 
    низкой их важности для заказчика до нехватки времени или иных ресурсов. Этот перечень составляется, чтобы у проектной команды и иных 
    заинтересованных лиц было чёткое единое понимание, что тестирование таких-то особенностей приложения не запланировано — такой подход позволяет 
    исключить появление ложных ожиданий и неприятных сюрпризов.
	- Тестовая стратегия (test strategy) и подходы (test approach). Описание процесса тестирования с точки зрения применяемых методов, подходов, 
    видов тестирования, технологий, инструментальных средств и т.д.
	- Критерии (criteria). Этот раздел включает следующие подразделы:
		 Приёмочные критерии, критерии качества (acceptance criteria) — любые объективные показатели качества, которым разрабатываемый продукт 
        должен соответствовать с точки зрения заказчика или пользователя, чтобы считаться готовым к эксплуатации.
		 Критерии начала тестирования (entry criteria) — перечень условий, при выполнении которых команда приступает к тестированию. Наличие этого 
        критерия страхует команду от бессмысленной траты усилий в условиях, когда тестирование не принесёт ожидаемой пользы.
		 Критерии приостановки тестирования (suspension criteria) — перечень условий, при выполнении которых тестирование приостанавливается. 
        Наличие этого критерия также страхует команду от бессмысленной траты усилий в условиях, когда тестирование не принесёт ожидаемой пользы.
		 Критерии возобновления тестирования (resumption criteria) — перечень условий, при выполнении которых тестирование возобновляется 
        (как правило, после приостановки).
		 Критерии завершения тестирования (exit criteria) — перечень условий, при выполнении которых тестирование завершается. Наличие этого 
        критерия страхует команду как от преждевременного прекращения тестирования, так и от продолжения тестирования в условиях, когда оно 
        уже перестаёт приносить ощутимый эффект.
	- Ресурсы (resources). В данном разделе тест-плана перечисляются все необходимые для успешной реализации стратегии тестирования ресурсы, 
    которые в общем случае можно разделить на:
	 	 — программные ресурсы (какое ПО необходимо команде тестировщиков, сколько копий и с какими лицензиями (если речь идёт о коммерческом ПО));
		 — аппаратные ресурсы (какое аппаратное обеспечение, в каком количестве и к какому моменту необходимо команде тестировщиков);
		 — человеческие ресурсы (сколько специалистов какого уровня и со знаниями в каких областях должно подключиться к команде тестировщиков 
         в тот или иной момент времени);
		 — временные ресурсы (сколько по времени займёт выполнение тех или иных работ);
		 — финансовые ресурсы (в какую сумму обойдётся использование имеющихся или получение недостающих ресурсов, перечисленных в предыдущих 
         пунктах этого списка); во многих компаниях финансовые ресурсы могут быть представлены отдельным документом, т.к. являются конфиденциальной 
         информацией.
	- Расписание (test schedule). Фактически это календарь, в котором указано, что и к какому моменту должно быть сделано. Особое внимание уделяется 
    т.н. «ключевым точкам» (milestones), к моменту наступления которых должен быть получен некий значимый ощутимый результат.
	- Роли и ответственность (roles and responsibility). Перечень необходимых ролей (например, «ведущий тестировщик», «эксперт по оптимизации 
    производительности») и область ответственности специалистов, выполняющих эти роли.
	- Оценка рисков (risk evaluation). Перечень рисков, которые с высокой вероятностью могут возникнуть в процессе работы над проектом. По каждому 
    риску даётся оценка представляемой им угрозы и приводятся варианты выхода из ситуации.
	- Документация (documentation). Перечень используемой тестовой документации с указанием, кто и когда должен её готовить и кому передавать.
	- Метрики (metrics). Числовые характеристики показателей качества, способы их оценки, формулы и т.д. На этот раздел, как правило, формируется 
    множество ссылок из других разделов тест-плана.

Какие вы знаете Виды тест планов?
	Виды тест-планов:
	 Мастер Тест-План (Master Test Plan): “Главный план тестирования (master test plan, project test plan): План тестирования, обычно охватывающий 
    несколько уровней тестирования.” (ISTQB). Это может быть как единственный базовый план, так и главный в иерархии нескольких планов, самый 
    статичный и высокоуровневый. Нужен когда:
        - продукт имеет множество релизов или итераций, между которыми сохраняется общая информация, которую нет смысла повторять;
        - различные тестовые команды работают над одним продуктом, выполняя различные задачи, которые необходимо объединить в рамках одного документа;
	 Детальный Тест-план (Phase Test plan): это документ, необходимый для успешного проведения тестирования на определённой фазе проекта. Он обеспечивает 
    чёткую структуру, организацию и понимание задач, что позволяет минимизировать ошибки и оптимизировать процесс тестирования. 
	 План приемочных испытаний (Acceptance Test Plan, ПСИ): план приемочного тестирования отличают от обычного плана тестирования факторы, которые приводят 
    к принятию бизнес-решения. План приемочного тестирования - это один из жизненно важных документов, который содержит руководство по выполнению 
    приемочного тестирования для конкретного проекта. Пишется на основе бизнес-требований (Business Requirements). Ревью этого плана обычно выполняется 
    by Managers/Business Analysts/Customers.

Что такое Чек лист?
    Чек-лист в тестировании - это список проверок, которые необходимо провести для тестирования приложения или его части. 
    Свойства, которыми должен обладать чек-лист:
        логичность
        последовательность и структурированность
        полнота и неизбыточность.

Перечислите возможные атрибуты Чек листа
    Обязательные части чек-листа:
        - Шапка:  содержит информацию о названии приложения, его версии, окружении, на котором проводится тестирование (версия ОС, браузера, эмулятора), 
        ответственного за тестирование, дату тестирования. 
        - Тестируемые модули, субмодули: например, регистрация, аутентификация, авторизация.
        - Список проверок: они должны отражать основную суть, без лишней детализации.
        - Уникальный идентификатор проверок для прослеживаемости. 
    Дополнительные части чек-листа:
        - Ожидаемый результат:  то, что мы ожидаем увидеть после запуска проверки согласно требованиям
        - Типы тестирования: к какому типу относится проверка?
        - Отчеты о дефекте: ссылки на отчеты о дефектах для прослеживаемости.
        - Заметки/комментарии: если нужно добавить информацию.

Перечислите варианты статусов при прохождении Чек листа
    Статус- информация о статусе прохождения проверки:
        Passed (Пройден) — проверка прошла успешно. Используется, когда тест полностью соответствует ожидаемым результатам.
        Failed (Провален) — проверка провалилась. Это значит, что обнаружены несоответствия между фактическим результатом и ожидаемым.
        Blocked (Заблокирован) — тест не может быть выполнен из-за каких-то внешних причин. Например, недостаток данных, сбои в системе или зависимость 
        от другой задачи, которая не завершена.
        Skipped (Пропущен) — тест был намеренно пропущен. Может быть, проверка нерелевантна для текущей версии, задачи или её выполнение не требуется.
        Not Run (Не выполнен) — тест ещё не был выполнен. Этот статус ставится до того, как проверка началась.
        N/A (Not Applicable, не применимо) означает, что проверка или тест не относится к текущему контексту, сценарию или продукту. 

Что такое Тест кейс?
    Тест-кейс (test case) — набор входных данных, условий выполнения и ожидаемых результатов, разработанный с целью проверки того или иного свойства или 
    поведения программного средства.
    Под тест-кейсом также может пониматься соответствующий документ, представляющий формальную запись тест-кейса

Перечислите атрибуты Тест кейса?
    — Идентификатор тест-кейса: Уникальный идентификатор, который помогает отслеживать и ссылаться на конкретный тест-кейс в рамках системы 
    управления тестами.
    — Название тест-кейса: Описательное название, которое точно и кратко описывает то, что будет тестироваться.
    — Описание: Полное описание того, что будет тестироваться и какие функциональные требования подлежат проверке.
    — Предусловия: Любые условия, которые должны быть выполнены перед выполнением тест-кейса, например, определенное состояние системы, данные 
    или конфигурация.
    — Шаги выполнения: Последовательность шагов, которые тестирующий должен выполнить, чтобы протестировать определенное поведение программного 
    обеспечения.
    — Входные данные: Любые данные или параметры, которые необходимы для выполнения тестовых шагов.
    — Ожидаемый результат: Четкое описание того, что ожидается после выполнения каждого шага, включая ожидаемые результаты, сообщения об ошибках 
    или поведение системы.
    — Фактический результат: Поле для ввода реальных результатов выполнения тест-кейса после его проведения.
    — Статус: Отметка о том, был ли тест-кейс успешно выполнен, провален или требует доработки.
    — Приоритет: Уровень важности тест-кейса относительно других. Это помогает определить, какие тест-кейсы следует выполнить в первую очередь.
    — Среда: Информация о том, на какой среде (операционная система, версия браузера и т. д.) и под какими условиями проводилось тестирование.
    — Создатель/ответственный: Информация о лице, ответственном за создание и поддержание тест-кейса.
    Эти атрибуты помогают обеспечить полное и точное тестирование функциональности программного обеспечения.

Перечислите виды Тест кейсов?
    — Позитивные тест-кейсы: Тесты, которые проверяют, что система работает так, как ожидается, когда ей передаются правильные данные и условия. 
    Они проверяют ожидаемое поведение системы при корректном использовании.
    — Негативные тест-кейсы: Тесты, которые проверяют, как система реагирует на неправильные данные и условия. Они оценивают, как система обрабатывает 
    ошибочные вводы или недопустимые сценарии.
    — Интеграционные тест-кейсы: Тесты, направленные на проверку взаимодействия между различными компонентами системы или между самим приложением и 
    его окружением.
    — Системные тест-кейсы: Тесты, которые проверяют функциональность системы как целого. Они могут включать в себя тестирование основных функций, 
    производительности, нагрузки и т. д.
    — Автоматизированные тест-кейсы: Тесты, которые разработаны для автоматизации и интеграции в процессы непрерывной интеграции и поставки.
    — Регрессионные тест-кейсы: Тесты, направленные на проверку того, что изменения в коде или конфигурации не повлияли на уже работающий функционал.
    — Тест-кейсы безопасности: Тесты, которые оценивают уровень безопасности программного обеспечения и его устойчивость к различным видам атак.
    — Тест-кейсы производительности: Тесты, которые проверяют, насколько хорошо система обрабатывает нагрузку и как быстро выполняет определенные операции.

Что такое Тестовый набор (Test Suite)?
	 Тестовый набор (Test Suite) представляет собой набор тестов, которые группируются вместе для выполнения определенной цели, обычно для 
    тестирования определенных функциональных аспектов программного обеспечения или для проверки определенных сценариев использования.
	Когда приложение или система разрастается, тестирование отдельных частей по-отдельности становится недостаточным. Тестовый набор 
    позволяет сгруппировать несколько тестов в более крупные единицы, чтобы их можно было запускать сразу, а также для удобной организации 
    их соответствующим образом. Это позволяет упростить запуск и организацию тестов, особенно когда их количество становится очень большим. 
    Тестовые наборы используются для управления и запуска целых групп тестов, что упрощает автоматизацию процесса тестирования.
	Кроме того, с помощью тестовых наборов можно организовать тесты на различные уровни, от модульных до интеграционных и системных, 
    и предоставлять удобный способ запуска всех тестов, связанных с определенной функциональностью или сценарием.
	Обычно тестовые наборы создаются для конкретных целей тестирования. Например, для отдельного модуля, для регрессионного тестирования, 
    для производительности и т.д.

Что такое Баг репорт?
	Отчёт о дефекте (defect report) — документ, описывающий и приоритизирующий обнаруженный дефект, а также содействующий его устранению.

Какое нужно соблюдать правило в баг репорте для хорошего Summary?
    Необходимо составить предложение, в котором факты дефекта изложены в следующей последовательности:
        - Что?: Что происходит или не происходит согласно спецификации или вашему представлению о нормальной работе программного продукта. 
        При этом указывайте на наличие или отсутствие объекта проблемы, а не на его содержание (его указывают в описании). 
        Если содержание проблемы варьируется, все известные варианты указываются в описании.
        - Где?: В каком месте интерфейса пользователя или архитектуры программного продукта находится проблема. Причем, начинайте предложение 
        с существительного, а не предлога.
        - Когда? (При каких обстоятельствах?): В какой момент работы программного продукта, по наступлению какого события или при каких 
        условиях проблема проявляется.

Перечислите атрибуты Баг репорта?
	Идентификатор:  уникальный номер отчета. Присваивается автоматически в багтрекинговой системе (BTS, bug tracking system) 
	Краткое описание (summary): отвечает на три вопроса: что, где, когда?  Что произошло? Где это произошло? При каких условиях?
	Подробное описание (description): информация о дефекте в развернутом виде + фактический и ожидаемый результат + ссылка на требование
	Шаги по воспроизведению (steps to reproduce, STR) 
	Окружение (environment): информация о среде, на которой был обнаружен баг (версия ОС, браузера, мобильного устройства)
	Важность (severity) - степень ущерба, который наносится проекту существованием дефекта. Серьезность для разрабатываемого 
	Срочность (priority) показывает, как быстро дефект должен быть устранён.
	Комментарий (comments, additional info) дополнительные данные о дефекте, возможность упомянуть исполнителя
	Вложения (attachments) подтверждение дефекта: фото, видео, логи, тестовые данные, архивы и так далее
	Также в дефектах обычно есть следующие поля:
		 — Статус в жизненном цикле
		 — Информация об исполнителе
		 — Ссылки на связанные артефакты

Опишите Жизненный цикл бага
	- Обнаружен (submitted) — начальное состояние отчёта (иногда называется «Новый» (new)), в котором он находится сразу после создания. 
    Некоторые средства также позволяют сначала создавать черновик (draft) и лишь потом публиковать отчёт.
	- Назначен (assigned) — в это состояние отчёт переходит с момента, когда кто-то из проектной команды назначается ответственным за 
    исправление дефекта. Назначение ответственного производится или решением лидера команды разработки, или коллегиально, или по добровольному 
    принципу, или иным принятым в команде способом или выполняется автоматически на основе определённых правил
	- Исправлен (fixed) — в это состояние отчёт переводит ответственный за исправление дефекта член команды после выполнения соответствующих 
    действий по исправлению
	- Проверен (verified) — в это состояние отчёт переводит тестировщик, удостоверившийся, что дефект на самом деле был устранён. Как правило, 
    такую проверку выполняет тестировщик, изначально написавший отчёт о дефекте.
	- Закрыт (closed) — состояние отчёта, означающее, что по данному дефекту не планируется никаких дальнейших действий (хотя, конечно, ничто не 
    мешает в будущем этому дефекту стать «открытым заново» (reopened)). 
	- Рекомендован к отклонению (to be declined) — в это состояние отчёт о дефекте может быть переведён из множества других состояний с целью 
    вынести на рассмотрение вопрос об отклонении отчёта по той или иной причине. Если рекомендация является обоснованной, отчёт переводится в 
    состояние «Отклонён» (см. следующий пункт).
	- Отклонён (declined) — в это состояние отчёт переводится в случаях, подробно описанных в пункте «Закрыт», если средство управления отчётами 
    о дефектах предполагает использование этого состояния вместо состояния «Закрыт» для тех или иных резолюций по отчёту.
    - Отложен (deferred) — в это состояние отчёт переводится в случае, если исправление дефекта в ближайшее время является нерациональным или 
    не представляется возможным, однако есть основания полагать, что в обозримом будущем ситуация исправится (выйдет новая версия библиотеки, 
    вернётся из отпуска специалист по некоей технологии, изменятся требования заказчика и т.д.).

Что такое Priority?
     Срочность (priority) показывает, как быстро дефект должен быть устранён.

Перечислите классификации Priority
    — Наивысшая (ASAP, critical) срочность указывает на необходимость устранить дефект настолько быстро, насколько это возможно.
    — Высокая (high) срочность означает, что дефект следует исправить вне очереди, т.к. его существование или уже объективно мешает работе, или 
    начнёт создавать такие помехи в самом ближайшем будущем.
    — Обычная (normal) срочность означает, что дефект следует исправить в порядке общей очерёдности. Такое значение срочности получает большинство дефектов.
    — Низкая (low) срочность означает, что в обозримом будущем исправление данного дефекта не окажет существенного влияния на повышение качества продукта.

Что такое Severity?
	 Важность (severity) - степень ущерба, который наносится проекту существованием дефекта. Серьезность для разрабатываемого ПО.
    Перечислите классификации  Severity
    — Критическая (critical) — существование дефекта приводит к масштабным последствиям катастрофического характера
    — Высокая (major) — существование дефекта приносит ощутимые неудобства многим пользователям в рамках их типичной деятельности
    — Средняя (medium) — существование дефекта слабо влияет на типичные сценарии работы пользователей, и/или существует обходной путь достижения цели
    — Низкая (minor) — существование дефекта редко обнаруживается незначительным процентом пользователей и (почти) не влияет на их работу 

Приведите пример Низкого Priority и Высокого Severity
     Функция генерации годового отчета, которая будет использована только через полгода

Приведите пример Низкого Severity и Высокого Priority
     Логотип компании на главной странице содержит орфографическую ошибку. На функционал это вообще не влияет, но портит пользовательский опыт. 
    Этот баг нужно исправить с высоким приоритетом, несмотря не то, что на продукт он влияет минимально

Что такое Матрица соответствия требований (Requirements Traceability Matrix)?
	 Матрица трассируемости (traceability matrix, RTM) - двумерная таблица, описывающая связь двух сущностей (например, требований и тестовых сценариев). 
    Таблица позволяет производить прямую и обратную трассировку от одной сущности к другой, обеспечивая таким образом возможность определения покрытия 
    и оценки влияния предполагаемых изменений. [ISTQB Glossary]
	Базовая матрица служит для визуальной оценки тестового покрытия, где указаны требования и тест-кейсы, проверяющие их.
	На пересечение ставится метка, благодаря которой можно принять решение об оптимизации количества кейсов для проверки требования.

Что такое Тест-отчет?
	 Отчет о  тестировании (test progress report) - вид отчета о тестировании, составляемый через регулярные промежутки времени, содержащий данные о 
    ходе тестирования в сравнении с исходным планом, о рисках и альтернативах, требующих принятия решения. [ISTQB Glossary]
	Основная цель отчета о тестировании: дать общую оценку качества продукта и рекомендации по возможности или невозможности его релиза.
	Атрибуты отчета о тестировании
        — Краткое описание (summary) отражает основные достижения, проблемы, выводы и рекомендации.
        — Команда тестировщиков (test team)
        — Описание процесса тестирования (testing process description) - перечень работ за конкретный период
        — Расписание (timetable) - детализированное расписание работы команды тестировщиков и/или личные расписания участников команды.
        — Статистика по новым дефектам (new defects statistics) в виде таблицы
        — Список новых дефектов (new defects list)
        — Статистика по всем дефектам (overall defects statistics) - таблица, содержащая данные обо всех дефектах за время проекта
        — Рекомендации (recommendations) 
        — Приложения (appendixes) - фактические данные (графики и диаграммы)

По времени Тест отчет на сколько типов возможно разделить?
	 Отчёты о тестировании, представленные в контексте времени, обычно позволяют отслеживать прогресс тестирования на различных этапах проекта. 
    Вот некоторые типы таких отчётов:
	- Ежедневные отчёты: Эти отчёты генерируются ежедневно и предоставляют обзор текущего статуса тестирования, включая прогресс, выявленные 
    проблемы и результаты проведённых тестов за день.
	- Еженедельные отчёты: Данные отчеты генерируются раз в неделю и содержат сведения о прогрессе тестирования за неделю, включая общий статус, 
    пройденные тесты, выявленные дефекты, планы на следующую неделю и т.д.
	- Ежемесячные отчёты: Эти отчёты охватывают данные за целый месяц и могут включать обширный анализ прогресса, использованных ресурсов, изменений 
    требований, пересмотра целей и т.д.
	- Отчёты о промежуточных результатах (Intermediate Progress Reports): Сгенерированные на промежуточных этапах проекта, они позволяют контролировать 
    прогресс тестирования до завершения тестирования всего проекта.
	- Финальные отчёты: Составляются по завершении тестирования и включают в себя итоговые данные о пройденных и проваленных тестах, общую статистику 
    по дефектам, обзор общего качества и т.п.
	 Эти отчёты ориентированы на временные рамки различных этапов тестирования и предоставляют информацию о текущем статусе, прогрессе и обзоре 
    результатов тестирования.

Что должен показывать Промежуточный отчет?
	 Промежуточный отчёт о тестировании, как правило, является сводным документом, который предоставляет информацию о текущем статусе процесса тестирования 
    на промежуточном этапе проекта. Вот несколько ключевых аспектов, которые должен включать промежуточный отчёт:
        - Прогресс тестирования: Промежуточный отчёт должен включать информацию о том, сколько тестов было запланировано выполнить на данном этапе, сколько 
        из них завершено, и каков оставшийся объём работы.
        - Сроки и бюджет: Отчёт должен оценить текущее состояние процесса тестирования по отношению к запланированным срокам и бюджетным ограничениям. 
        Если возникли задержки или отклонения от первоначального плана, их также следует отразить в отчёте.
        - Выявленные проблемы и дефекты: Промежуточный отчёт должен содержать информацию о выявленных проблемах и дефектах, включая их степень серьёзности, 
        статус исправления, и общую динамику появления новых проблем.
        - Качество тестирования: Отчёт может включать данные о качестве проведённых тестов, включая покрытие кода, процент успешно пройденных тестов, и 
        общую оценку качества процесса тестирования.
        - Ресурсы и использование ресурсов: Исчерпывающий промежуточный отчёт должен также включать информацию о необходимых ресурсах (людских, временных, 
        и т.д.) и их фактическом использовании.
        - Риски и проблемы: Отчёт должен описывать выявленные риски и проблемы, связанные с процессом тестирования, и планы по их управлению.
        Для менеджмента проекта и заинтересованных сторон промежуточный отчёт представляет собой обзор текущего состояния тестирования на определённый момент 
        времени и является важным инструментом для принятия решений.

Что должен показывать Итоговый отчет?
	 Итоговый отчёт о тестировании представляет собой сводный документ, который содержит информацию о выполненном тестировании проекта. Вот несколько 
    ключевых аспектов, которые обычно включаются в итоговый отчёт:
        - Обзор процесса тестирования: Итоговый отчёт должен содержать обзорный анализ того, как проходил процесс тестирования, включая общий объем 
        проведённых тестов, использованные методики и инструменты, а также основные этапы процесса тестирования.
        - Результаты выполненных тестов: Отчёт должен включать данные о результатах выполненных тестов, включая количество пройденных, проваленных и 
        пропущенных тестов, а также детализацию по найденным дефектам и проблемам.
        - Покрытие кода: Если доступны соответствующие данные, итоговый отчёт может также включать информацию о покрытии кода тестами, то есть
        процентный объём кода, который был покрыт тестами.
        - Качество продукта: Отчёт должен включать анализ качества продукта на основе результатов тестирования, включая общую оценку качества, 
        основные обнаруженные дефекты и их влияние на продукт.
        - Ресурсы и использование ресурсов: Итоговый отчёт должен предоставлять информацию о ресурсах, затраченных на процесс тестирования, их 
        фактическом использовании и соотношении к запланированным бюджетным и временным ограничениям.
        - Рекомендации: Отчёт может включать рекомендации по улучшению процесса тестирования, предложения по оптимизации ресурсов, а также оценку 
        эффективности используемых методик и инструментов.
	Итоговый отчёт является важным документом, который позволяет оценить эффективность процесса тестирования, понять качество разрабатываемого продукта и принять решения по улучшению процесса разработки и тестирования.