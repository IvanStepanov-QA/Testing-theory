Что такое Ошибка/Дефект/Отказ?
	- Ошибка (Bug): В разработке программного обеспечения "ошибка" обычно относится к ошибке в коде, которая приводит к неправильной 
    функциональности программы. Это может быть результатом опечатки, неправильной логики, неверного предположения или других проблем 
    в коде. Когда разработчики находят ошибку, они должны исправить ее, чтобы программа работала корректно.
	- Дефект (Defect): Термин "дефект" часто используется в процессе тестирования программного обеспечения. Дефект возникает, когда программа 
    или система не соответствует спецификациям или ожиданиям пользователя. Дефект может быть как результатом ошибки в коде (бага), так и 
    проектировочного или функционального недочета. Когда тестировщики обнаруживают дефект, они документируют его и отслеживают процесс 
    исправления.
	- Отказ (Failure): "Отказ" обычно используется для описания некорректной работы программы в реальной среде. Когда программа не 
    выполняет свои функции или делает это неправильно, это считается отказом. Отказ может произойти из-за наличия дефектов или ошибок, 
    приведенных в коде программы. Отказ может также быть вызван внешними факторами, такими как аппаратные сбои, неправильные действия 
    пользователей и другие.

Перечислите Основные типы багов?
	- Синтаксические ошибки: Такие ошибки возникают из-за неправильного синтаксиса кода, что приводит к невозможности компиляции программы.
	- Логические ошибки: Неверная логика в программе, что приводит к неверному или нежелательному поведению программы при её выполнении.
	- Ошибки времени выполнения: Эти ошибки возникают в процессе выполнения программы из-за некорректных операций или неправильных данных. 
    Примеры включают деление на ноль, попытки доступа к несуществующей памяти и другие.
	- Ошибки ввода/вывода данных: Проблемы, связанные с неправильной обработкой входных и выходных данных, включая некорректную обработку 
    пользовательского ввода или ошибки при записи/чтении данных из файлов или баз данных.
	- Проблемы сети: Ошибки, возникающие из-за неправильной работы сети, включая ошибки соединения, обработки сетевых запросов и 
    маршрутизации данных.
	- Проблемы производительности: Включают утечки памяти, медленную скорость выполнения, высокое потребление ресурсов и другие проблемы, 
    влияющие на производительность программы.
	- Проблемы совместимости: Баги, которые возникают из-за несовместимости программного обеспечения с определенными платформами, системами 
    или окружениями.
	- Проблемы безопасности: Ошибки в безопасности, которые приводят к уязвимостям, несанкционированному доступу, утечкам информации или 
    другим угрозам для информационной безопасности.

Перечислите “Хитрые баги”?
	 Хитрые баги (tricky bugs) – это те, которые сложно обнаружить, воспроизвести и исправить. Они часто приводят к неожиданным и сложным 
    последствиям в работе программы. Вот несколько примеров:
	- Гейзенбаг — это баг, который исчезает или меняет свое поведение, как только его пытаются изучить или отладить.
    - Борбаг — это баг, который проявляется постоянно, но только при определенных условиях или входных данных.
	- Недетерминированное поведение - приложение дает разные результаты при одних и тех же входных данных в разное время из-за зависимостей 
    от внешних факторов или неочевидных состояний.
	- Подвисание (Deadlock) - Два или более процесса блокируют друг друга, ожидая ресурсы, которые удерживают другие процессы.
	- Мандельбаг — это баг с чрезвычайно сложным и непредсказуемым поведением, часто вызванный глубокими архитектурными дефектами системы.
    - Шрединбаг — это баг, который проявляется только при определённых условиях и может исчезнуть при попытке изучения кода. Как и в 
    парадоксе Шрёдингера, баг как бы «существует и не существует одновременно», пока его не начнут тестировать.
    - Лунный баг — это баг, который проявляется только в определённое время, зависимо от даты или времени суток. Он может 
    возникнуть из-за скрытых временных параметров в коде, что делает его сложным для обнаружения и воспроизведения.
    - Статистический баг — это баг, который не проявляется при одном прогоне, но возникает при многократном выполнении кода, генерирующего 
    случайные или псевдослучайные результаты.
    - Баг Хиггса — это баг, существование которого предсказано или предполагается, но на практике его невозможно обнаружить. Он может 
    существовать только «теоретически», из-за ошибки в логике кода, но никогда не проявляется при реальном использовании.

Приведите пример Blocker bug
	"Blocker bug" - это термин, используемый в разработке программного обеспечения для обозначения критической ошибки, которая препятствует 
    нормальной работе системы. Такие ошибки могут быть серьёзным препятствием для продолжения разработки или использования программного продукта. 
    Вот пример "blocker bug":
	Предположим, у веб-приложения для онлайн-торговли обнаруживается ошибка, из-за которой пользователи не могут завершить процесс оплаты. 
    Даже после ввода всех данных оплаты и подтверждения покупки, пользователи получают сообщение об ошибке и платеж не проходит. Это могло 
    бы быть классифицировано как "blocker bug", потому что оно непосредственно влияет на ключевую функциональность приложения, препятствует 
    завершению транзакций и, таким образом, препятствует основной цели приложения – совершению покупок.
	Команда разработки немедленно займется этой проблемой, поскольку она негативно влияет на бизнес и пользователей. Обычно такие проблемы 
    имеют высокий приоритет и рассматриваются как неотложные для решения.

Приведите пример Critical bug
	"Critical bug" - это термин, который обычно используется для обозначения серьезной ошибки в программном обеспечении, которая может привести 
    к серьезным последствиям, таким как потеря данных, системный сбой или угроза безопасности.
	В медицинской информационной системе существует ошибка, из-за которой результаты анализов пациентов периодически перепутываются, что может 
    привести к неправильному назначению лечения. Это критическая ошибка, так как она прямо влияет на здоровье пациентов и может иметь серьезные 
    медицинские последствия.
	Команда разработки и ИТ-специалисты должны тут же приступить к идентификации и устранению этой проблемы, поскольку она может привести к 
    непоправимым последствиям и имеет прямое отношение к здоровью и благополучию людей.

Приведите пример Major bug
	"Major bug" - это термин, обозначающий значительную ошибку в программном обеспечении, которая может вызвать серьезное нарушение 
    функциональности, но, в отличие от critical bug, не представляет угрозы для безопасности или жизненно важных функций.
	В веб-приложении для онлайн-покупок скидка в 50% автоматически применяется ко всем товарам в корзине, независимо от их типа или бренда.
    Это приводит к значительным потерям прибыли для компании, поскольку скидка не должна автоматически применяться к определенным товарам или 
    брендам. Этот дефект серьезно влияет на финансовые показатели компании, но не представляет угрозы для безопасности или жизненно важных функций.
	Для решения данной проблемы команда разработки и техническая поддержка должны провести тщательное тестирование и исправить это поведение, 
    чтобы избежать потерь прибыли и обеспечить правильную работу системы онлайн-продаж.
    Исправление major bug является важным, поскольку оно напрямую влияет на опыт пользователей и финансовую устойчивость компании, но не 
    требует немедленной реакции, как это случается с critical bug.

Приведите пример Minor bug
	Минорная ошибка (minor bug) обычно является незначительным дефектом в программном обеспечении, который не приводит к серьезным нарушениям 
    работы системы и не влияет на ее ключевую функциональность. Вот пример такой ошибки:
	В текстовом редакторе неверно отображается количество слов в документе в случае, если в тексте присутствуют знаки препинания и специальные 
    символы. Например, при наличии апострофов или дефисов количество слов может быть неверно посчитано. Хотя это может быть раздражающим, 
    особенно для людей, которые работают с текстом, это не представляет критической проблемы и не влияет на возможность сохранения и 
    редактирования документов.
	Для решения такой ошибки команда разработки может рассмотреть оптимизацию алгоритма подсчёта слов в тексте и обновить соответствующий 
    функционал без причинения значительных помех в общей работоспособности программы.

Приведите пример Trivial bug
	Trivial bug (мелкая ошибка) обычно представляет собой наименее значимый тип дефекта в программном обеспечении. Вот пример такой ошибки:
	В текстовом редакторе в подменю "Стиль" встречается опечатка – вместо "Курсив" написано "Курсивв". Это незначительная опечатка в
    пользовательском интерфейсе, которая не влияет на возможность пользователей изменять форматирование текста в документах.
	Для решения такой ошибки команда разработки может просто обновить текст в пользовательском интерфейсе без внесения каких-либо 
    изменений в программную логику, поскольку эта опечатка не влияет на общее функционирование программы.

Какой жизненный цикл Bug report?
    - Новый (New). Тестировщик нашел баг, дефект успешно занесен в «Bug-tracking» систему.
    - Открыт — Закрыт (1) По разным причинам дефект может и не считаться дефектом или считаться неактуальным.  Иногда этот переход 
    выносят в отдельный этап жизненного цикла, который называется Отклонен (Rejected). 
    - Открыт — В Работе (2) Баг подтвержден и передан разработчикам, которые начали работу над исправлением.
    - В Работе — Закрыт (3) Бывает, что в ходе исправления бага разработчик понимает, что это не баг, а что-то другое 
    (фича / неточность в требованиях, которую обсудили без тестировщиков и т.п.) В этом случае разработчик описывает почему это 
    не баг и закрывает задачу.
    - В Работе — Исправлен (4) Ошибку локализовали и исправили, она передана тестировщику.
    - Исправлен — Открыт (5) Тестировщик проверил исправление, баг все еще воспроизводится, то есть не исправлен. Он возвращается 
    разработчику (возможно с указанием каких-то дополнительных деталей). Этот переход может существовать как отдельный этап жизненного 
    цикла бага — Переоткрыт (Reopened).
    Исправлен — Закрыт (6) Тестировщик проверил исправление, баг больше не воспроизводится.
    -Закрыт — Открыт (7) Если баг случайно закрыли, должна быть возможность его переоткрыть.
     Не стоит переоткрывать закрытые баги, если они уже были исправлены, проверены и закрыты. Ситуация может возникать в ходе 
    регрессионного тестирования.


Какие основные цели локализации дефекта?
	 Цели локализации дефекта, или поиска ошибок, включают в себя следующее:
	- Выявление проблемы: Главная цель локализации дефекта - найти и идентифицировать проблему в программном обеспечении. Это важный 
    шаг для того, чтобы исправить ошибку и улучшить качество программы.
	- Репродукция: Чтобы успешно локализовать дефект, необходимо воспроизвести его. Это позволяет разработчикам и тестировщикам 
    идентифицировать шаги, которые привели к возникновению ошибки, и убедиться, что она воспроизводится систематически.
	- Ограничение дефекта: Локализация помогает установить ограничения и контекст, в которых возникает ошибка. Например, определить, 
    что ошибка проявляется только при определенных условиях, с определенными данными или на конкретной платформе.
	- Изоляция причины: Как только дефект локализован, цель состоит в том, чтобы изолировать причину проблемы. Это включает в себя 
    анализ кода, алгоритмов, входных данных, окружения выполнения, или других факторов, влияющих на появление ошибки.
	- Создание воспроизводимого теста: Результатом процесса локализации является создание тестового случая или сценария, который 
    может быть использован для проверки исправления дефекта и предотвращения его возникновения в будущем.
	- Повышение качества: Локализация дефектов помогает в повышении общего качества программного обеспечения путем устранения ошибок 
    и предотвращения их повторного возникновения.
	 Локализация дефектов играет важную роль в процессе разработки программного обеспечения, поскольку позволяет обнаружить и устранить 
    проблемы, улучшая стабильность, безопасность и производительность разрабатываемого продукта.


Где могут находиться дефекты?
	 Дефекты (или ошибки) могут находиться в различных местах в процессе разработки программного обеспечения. Вот некоторые из 
    распространенных мест, где могут находиться дефекты:
	- Код: Это наиболее очевидное место, где могут находиться дефекты - внутри самого программного кода.
	- Интеграция: Ошибки могут возникать в процессе интеграции нескольких частей программного обеспечения, особенно если они 
    разрабатывались разными командами или на разных технологических стеках.
	- Данные: Иногда ошибки могут возникать из-за неожиданных данных, которые обрабатываются программой. Некорректные или неожиданные 
    данные могут вызвать сбои.
	- Интерфейс пользователя: Дефекты могут быть связаны с пользовательским интерфейсом - например, неправильное отображение информации 
    или некорректное поведение элементов управления.
	- Логика приложения: Ошибки также могут возникать из-за неправильной логики внутри приложения, что может привести к нежелательным 
    последствиям.
	- Системное окружение: Иногда проблемы могут возникать из-за особенностей операционной системы, конфигурации сервера или других аспектов 
    системного окружения.
	- Требования и спецификации: Если требования не были должным образом поняты или документированы, это может привести к разработке с ошибками.
	- Тестовые сценарии: Даже тестовые сценарии могут содержать ошибки, что может привести к неправильному обнаружению дефектов или пропуску 
    некоторых проблем.
	- Архитектура: Проблемы могут возникать из-за неудачной архитектуры приложения или несовместимости между различными компонентами приложения.
	 Это лишь несколько примеров. Дефекты могут возникать практически в любом аспекте разработки программного обеспечения и могут быть обусловлены 
    как техническими проблемами, так и проблемами в управлении проектом.


Перечислите методы локализации дефекта в клиентской части.
	Локализация дефектов в клиентской части программного обеспечения - это критически важный этап в разработке, который включает в себя использование различных методов для выявления и устранения проблем. Вот некоторые методы, которые могут быть использованы для локализации дефектов в клиентской части:
	Тестирование сценариев использования: Создание и выполнение тестовых сценариев, которые покрывают основные функции и возможные пути взаимодействия с клиентской частью приложения.
	Отладка в браузере: Использование инструментов разработчика в браузере для отслеживания, профилирования и отладки кода JavaScript, анализа сетевого трафика и изменений DOM.
	Тестирование совместимости и респонсивности: Проверка работы приложения на различных браузерах, платформах и устройствах для обнаружения дефектов, которые могут возникать из-за различий в окружении.
	Тестирование производительности: Оценка скорости загрузки, отзывчивости интерфейса и общей производительности приложения в различных условиях (например, медленное соединение или высокая нагрузка).
	Тестирование ввода данных: Проверка корректности обработки и визуализации пользовательского ввода, такого как форматы данных, ограничения на ввод, и обработка ошибок.
	Анализ кода и ресурсов: Обзор исходного кода, включая HTML, CSS и JavaScript, для выявления потенциальных проблемных мест.
	Использование инструментов записи и воспроизведения действий пользователя: Инструменты, позволяющие автоматизировать ввод действий пользователя для последующего воспроизведения, могут помочь в обнаружении и устранении дефектов, связанных с конкретными последовательностями действий.
	Сбор обратной связи от пользователей: Активный сбор фидбэка от пользователей позволяет выявить и решить проблемы, с которыми они сталкиваются при использовании приложения.
	Эти методы могут быть использованы в комбинации для обнаружения и устранения дефектов в клиентской части приложения, обеспечивая более надежное и удобное взаимодействие для пользователей.


Перечислите методы локализации дефекта в серверной части.
	Локализация дефектов в серверной части программного обеспечения имеет ключевое значение для обеспечения его надежной работы. Ниже перечислены методы, которые могут применяться для локализации дефектов в серверной части:
	Логирование и мониторинг: Использование систем логирования для записи информации о запросах, исключениях и других событиях в приложении зачастую помогает в обнаружении проблем. Мониторинг производительности и доступности сервера также является важным аспектом.
	Тестирование API: Проведение тестирования API, включая проверку входных и выходных данных, обработку ошибок и общую функциональность API.
	Отладка запросов и ответов: Использование инструментов для отладки сетевого трафика, таких как Postman или curl, для анализа входящих и исходящих запросов по API.
	Изучение исходного кода: Анализ кода серверной части приложения для выявления потенциальных уязвимостей, плохо оптимизированного кода и других проблем.
	Использование инструментов мониторинга производительности: Инструменты, которые позволяют отслеживать производительность приложения, такие как New Relic, Prometheus или DataDog, могут помочь в выявлении проблем с производительностью сервера.
	Тестирование отказоустойчивости: Имитация отказов в работе сервера, таких как отключение базы данных или сетевого оборудования, для проверки того, насколько система устойчива к неполадкам.
	Регрессионное тестирование: Проверка того, что изменения в коде не вызывают побочных эффектов и не ломают существующий функционал.
	Проверка конфигураций и зависимостей: Проверка корректности настроек сервера, библиотек и других зависимостей.
	Эти методы помогают локализовать и устранять дефекты в серверной части, что способствует созданию более стабильного и надежного программного обеспечения.
